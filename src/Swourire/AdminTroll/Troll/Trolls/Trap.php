<?php


namespace Swourire\AdminTroll\Troll\Trolls;


use pocketmine\block\Block;
use pocketmine\block\BlockIds;
use pocketmine\level\Position;
use pocketmine\math\Vector3;
use pocketmine\Player;
use Swourire\AdminTroll\Main;
use Swourire\AdminTroll\Troll\TrollBase;
use Swourire\AdminTroll\Troll\Trolls\Tasks\TrapResetTask;

class Trap extends TrollBase
{
    protected $name = "Trapper";

    private $resetTime;

    public function __construct(Player $playerTroll, Player $playerVictim, int $time = 10)
    {
        $this->resetTime = $time;
        parent::__construct($playerTroll, $playerVictim);
    }

    public function apply(): void
    {
        $blocksChanged = $this->spawnGlassStructure();
        $this->scheduleReset($blocksChanged);
        parent::apply(); // TODO: Change the autogenerated stub
    }

    public function scheduleReset(array $blocks): void
    {
        $task = new TrapResetTask($blocks);
        Main::getInstance()->getScheduler()->scheduleDelayedTask($task, $this->resetTime * 20);
    }

    public function spawnGlassStructure(): array
    {
        $level = $this->playerVictim->getLevel();
        $position = $this->playerVictim->getPosition();
        if (!$position instanceof Vector3) return [];
        $x = $position->getX();
        $z = $position->getZ();
        $y = $position->getY();

        $positions = [
                new Position($x, $y - 1, $z),//Block under
                new Position($x, $y + 2, $z),//Block on top

                new Position($x + 1, $y, $z), //block in front down
                new Position($x + 1, $y + 1, $z), //block in front up

                new Position($x - 1, $y, $z), //block behind down
                new Position($x - 1, $y + 1, $z), //block behind up

                new Position($x, $y, $z + 1), //block down on right
                new Position($x, $y + 1, $z + 1), //block up on right

                new Position($x, $y, $z - 1), //block down on left
                new Position($x, $y + 1, $z - 1) //block up on left
        ];

        $blocks = [];
        foreach ($positions as $key => $position) {
            $blocks[] = $level->getBlockAt($position->getX(), $position->getY(), $position->getZ());
            $level->setBlock($position, Block::get(BlockIds::GLASS));
        }

        return $blocks;
    }
}